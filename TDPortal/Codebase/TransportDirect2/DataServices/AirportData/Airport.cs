// *********************************************** 
// NAME             : Airport.cs      
// AUTHOR           : Mitesh Modi
// DATE CREATED     : 14 Oct 2013
// DESCRIPTION  	: Airport class loaded from AirRouteMatrix.Airports table
// ************************************************
// 
                
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using TDP.Common.PropertyManager;

namespace TDP.Common.DataServices.AirportData
{
    /// <summary>
    /// Airport class
    /// </summary>
    [Serializable]
    public class Airport
    {
        #region Private memebers

        private static string naptanPrefix = string.Empty;
        private string iataCode;
        private string name;
        private int noOfTerminals;
        private string[] naptans;
        private string globalNaptan;

        #endregion

        #region Constructor

        /// <summary>
        /// Constructor.
        /// Uses the iata code and no of terminals to create the array of naptans.
        /// </summary>
        /// <param name="iataCode"></param>
        /// <param name="name"></param>
        /// <param name="noOfTerminals"></param>
        public Airport(string iataCode, string name, int noOfTerminals)
        {
            this.iataCode = iataCode;
            this.name = name;
            this.noOfTerminals = noOfTerminals;
            globalNaptan = NaptanPrefix + iataCode;

            naptans = new string[noOfTerminals];

            for (int i = 0; i < noOfTerminals; i++)
            {
                naptans[i] = NaptanPrefix + iataCode + (i + 1);
            }
        }

        #endregion

        #region Public Properties

        /// <summary>
        /// Returns the Aiport Naptan Prefix property from the properties service. This
        /// is prepended to the Airport IATA code to generate the Naptan for the airport. If the
        /// airport has more than one terminal, there will be a separate Naptan for each, 
        /// generated by added in the terminal number after the IATA code
        /// </summary>
        public static string NaptanPrefix
        {
            get
            {
                if (string.IsNullOrEmpty(naptanPrefix))
                    naptanPrefix = Properties.Current["LocationService.NaptanPrefix.Airport"];
                return naptanPrefix;
            }
        }

        /// <summary>
        /// Read only. IATA Code of the airport
        /// </summary>
        public string IATACode
        {
            get { return iataCode; }
        }

        /// <summary>
        /// Read only. Airport name
        /// </summary>
        public string Name
        {
            get { return name; }
        }

        /// <summary>
        /// Read only. Number of terminals that the airport has.
        /// </summary>
        public int NoOfTerminals
        {
            get { return noOfTerminals; }
        }

        /// <summary>
        /// Read only. A single "naptan" code representing the whole 
        /// airport (rather than individual terminals).  
        /// </summary>
        public string GlobalNaptan
        {
            get { return globalNaptan; }
        }

        /// <summary>
        /// Read only. Array of strings containing the terminal naptans.
        /// There will be one naptan for each terminal
        /// </summary>
        public string[] Naptans
        {
            get { return (string[])naptans.Clone(); }
        }

        #endregion

        #region Public methods

        /// <summary>
        /// Overridden Equals method to allow checking of two airports for equality
        /// </summary>
        /// <param name="obj"></param>
        /// <returns></returns>
        public override bool Equals(object obj)
        {
            if (obj is Airport)
            {
                Airport objAirport = (Airport)obj;
                return ((objAirport.IATACode == this.IATACode) && (objAirport.Name == this.Name) && (objAirport.NoOfTerminals == this.NoOfTerminals));
            }
            else
                return false;
        }

        /// <summary>
        /// Overridden GetHashCode method to allow use of Airport as a key in a hash table
        /// </summary>
        /// <returns></returns>
        public override int GetHashCode()
        {
            return iataCode.GetHashCode();
        }

        #endregion
    }
}