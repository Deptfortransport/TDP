// *********************************************** 
// NAME			: Airport.cs
// AUTHOR		: Jonathan George
// DATE CREATED	: 12/05/2004
// DESCRIPTION	: Represents an airport
// ************************************************ 
// $Log:   P:/TDPortal/archives/DotNet2.0Codebase/TransportDirect/AirDataProvider/Airport.cs-arc  $
//
//   Rev 1.0   Nov 08 2007 12:18:22   mturner
//Initial revision.
//
//   Rev 1.12   Sep 09 2004 17:48:56   RPhilpott
//Change Find-A-Flight via location to pass new "group" NaPTAN instead of individual terminals.
//Resolution for 1402: Find a Flight STN to BEB via 9200GLA gives no results
//Resolution for 1455: Air stopovers returns no journeys.
//
//   Rev 1.11   Aug 11 2004 11:55:42   CHosegood
//Naptan now ends with 1 even if only 1 terminal exists.
//
//   Rev 1.10   Jul 09 2004 13:08:54   passuied
//replaced property for airport naptan prefix
//
//   Rev 1.9   Jul 08 2004 14:11:32   jgeorge
//Actioned review comments
//
//   Rev 1.8   Jun 10 2004 09:40:26   jgeorge
//Fixed naptans bug
//
//   Rev 1.7   Jun 09 2004 17:01:50   jgeorge
//Added Equals and GetHashCode methods
//
//   Rev 1.6   Jun 07 2004 10:24:20   jgeorge
//Bug fix
//
//   Rev 1.5   Jun 03 2004 11:10:20   jgeorge
//Bug fix
//
//   Rev 1.4   May 20 2004 11:32:28   jgeorge
//Added Serializable attribute so class can be used with Session Manager.
//
//   Rev 1.3   May 13 2004 11:31:34   jgeorge
//Updates for Naptans and commenting
//
//   Rev 1.2   May 13 2004 09:28:14   jgeorge
//Modified namespace to TransportDirect.UserPortal.AirDataProvider
//
//   Rev 1.1   May 12 2004 16:43:06   jgeorge
//Bug fix to allow compilation.
//
//   Rev 1.0   May 12 2004 15:59:50   jgeorge
//Initial revision.

using System;
using TransportDirect.Common.ServiceDiscovery;
using TransportDirect.Common.PropertyService.Properties;

namespace TransportDirect.UserPortal.AirDataProvider
{
	/// <summary>
	/// Represents an airport
	/// </summary>
	[Serializable]
	public class Airport
	{
		private static string naptanPrefix = string.Empty;
		private string iataCode;
		private string name;
		private int noOfTerminals;
		private string[] naptans;
		private string globalNaptan;

		/// <summary>
		/// Constructor.
		/// Uses the iata code and no of terminals to create the array of
		/// naptans.
		/// </summary>
		/// <param name="iataCode"></param>
		/// <param name="name"></param>
		/// <param name="noOfTerminals"></param>
        public Airport(string iataCode, string name, int noOfTerminals)
        {
            this.iataCode = iataCode;
            this.name = name;
            this.noOfTerminals = noOfTerminals;
			globalNaptan = NaptanPrefix + iataCode;

            naptans = new string[noOfTerminals];
			
			for (int i = 0; i < noOfTerminals; i++)
			{
				naptans[i] = NaptanPrefix + iataCode + (i + 1);
			}
        }

		/// <summary>
		/// Returns the "FindA.NaptanPrefix.Airport" property from the properties service. This
		/// is prepended to the Airport IATA code to generate the Naptan for the airport. If the
		/// airport has more than one terminal, there will be a separate Naptan for each, 
		/// generated by added in the terminal number after the IATA code
		/// </summary>
		public static string NaptanPrefix
		{
			get
			{
				if (naptanPrefix.Length == 0)
					naptanPrefix = ((IPropertyProvider)TDServiceDiscovery.Current[ServiceDiscoveryKey.PropertyService])["FindA.NaptanPrefix.Airport"];
				return naptanPrefix;
			}
		}

		/// <summary>
		/// IATA Code of the airport
		/// </summary>
		public string IATACode 
		{
			get { return iataCode; }
		}

		/// <summary>
		/// Airport name
		/// </summary>
		public string Name 
		{
			get { return name; }
		}

		/// <summary>
		/// Number of terminals that the airport has.
		/// </summary>
		public int NoOfTerminals
		{
			get { return noOfTerminals; }
		}

		/// <summary>
		/// A single "naptan" code representing the whole 
		///  airport (rather than individual terminals).  
		/// </summary>
		public string GlobalNaptan
		{
			get { return globalNaptan; }
		}

		/// <summary>
		/// Array of strings containing the terminal naptans.
		/// There will be one naptan for each terminal
		/// </summary>
		public string[] Naptans
		{
			get { return (string[])naptans.Clone(); }
		}

		/// <summary>
		/// Overridden Equals method to allow checking of two airports for equality
		/// </summary>
		/// <param name="obj"></param>
		/// <returns></returns>
		public override bool Equals(object obj)
		{
			if (obj is Airport)
			{
				Airport objAirport = (Airport)obj;
				return ((objAirport.IATACode == this.IATACode) && (objAirport.Name == this.Name) && (objAirport.NoOfTerminals == this.NoOfTerminals));
			}
			else
				return false;
		}

		/// <summary>
		/// Overridden GetHashCode method to allow use of Airport as a key in a hash table
		/// </summary>
		/// <returns></returns>
		public override int GetHashCode()
		{
			return iataCode.GetHashCode();
		}
	}
}
