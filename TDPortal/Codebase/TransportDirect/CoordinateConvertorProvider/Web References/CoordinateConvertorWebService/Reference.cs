//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.296
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.296.
// 
#pragma warning disable 1591

namespace TransportDirect.UserPortal.CoordinateConvertorProvider.CoordinateConvertorWebService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="CoordinateConvertorSoap", Namespace="http://www.transportdirect.info/CoordinateConvertorService")]
    public partial class CoordinateConvertor : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback ConvertLatitudeLongitudetoOSGROperationCompleted;
        
        private System.Threading.SendOrPostCallback ConvertOSGRtoLatitudeLongitudeOperationCompleted;
        
        private System.Threading.SendOrPostCallback TestActiveOperationCompleted;
        
        private System.Threading.SendOrPostCallback TestConvertOSGRToLatitudeLongitudeOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public CoordinateConvertor() {
            this.Url = global::TransportDirect.UserPortal.CoordinateConvertorProvider.Properties.Settings.Default.td_userportal_coordinateconvertor_provider_CoordinateConvertorWebService_CoordinateConvertor;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event ConvertLatitudeLongitudetoOSGRCompletedEventHandler ConvertLatitudeLongitudetoOSGRCompleted;
        
        /// <remarks/>
        public event ConvertOSGRtoLatitudeLongitudeCompletedEventHandler ConvertOSGRtoLatitudeLongitudeCompleted;
        
        /// <remarks/>
        public event TestActiveCompletedEventHandler TestActiveCompleted;
        
        /// <remarks/>
        public event TestConvertOSGRToLatitudeLongitudeCompletedEventHandler TestConvertOSGRToLatitudeLongitudeCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.transportdirect.info/CoordinateConvertorService/ConvertLatitudeLongitu" +
            "detoOSGR", RequestNamespace="http://www.transportdirect.info/CoordinateConvertorService", ResponseNamespace="http://www.transportdirect.info/CoordinateConvertorService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public OSGridReference[] ConvertLatitudeLongitudetoOSGR(LatitudeLongitude[] latlongs) {
            object[] results = this.Invoke("ConvertLatitudeLongitudetoOSGR", new object[] {
                        latlongs});
            return ((OSGridReference[])(results[0]));
        }
        
        /// <remarks/>
        public void ConvertLatitudeLongitudetoOSGRAsync(LatitudeLongitude[] latlongs) {
            this.ConvertLatitudeLongitudetoOSGRAsync(latlongs, null);
        }
        
        /// <remarks/>
        public void ConvertLatitudeLongitudetoOSGRAsync(LatitudeLongitude[] latlongs, object userState) {
            if ((this.ConvertLatitudeLongitudetoOSGROperationCompleted == null)) {
                this.ConvertLatitudeLongitudetoOSGROperationCompleted = new System.Threading.SendOrPostCallback(this.OnConvertLatitudeLongitudetoOSGROperationCompleted);
            }
            this.InvokeAsync("ConvertLatitudeLongitudetoOSGR", new object[] {
                        latlongs}, this.ConvertLatitudeLongitudetoOSGROperationCompleted, userState);
        }
        
        private void OnConvertLatitudeLongitudetoOSGROperationCompleted(object arg) {
            if ((this.ConvertLatitudeLongitudetoOSGRCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ConvertLatitudeLongitudetoOSGRCompleted(this, new ConvertLatitudeLongitudetoOSGRCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.transportdirect.info/CoordinateConvertorService/ConvertOSGRtoLatitudeL" +
            "ongitude", RequestNamespace="http://www.transportdirect.info/CoordinateConvertorService", ResponseNamespace="http://www.transportdirect.info/CoordinateConvertorService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LatitudeLongitude[] ConvertOSGRtoLatitudeLongitude(OSGridReference[] osgrs) {
            object[] results = this.Invoke("ConvertOSGRtoLatitudeLongitude", new object[] {
                        osgrs});
            return ((LatitudeLongitude[])(results[0]));
        }
        
        /// <remarks/>
        public void ConvertOSGRtoLatitudeLongitudeAsync(OSGridReference[] osgrs) {
            this.ConvertOSGRtoLatitudeLongitudeAsync(osgrs, null);
        }
        
        /// <remarks/>
        public void ConvertOSGRtoLatitudeLongitudeAsync(OSGridReference[] osgrs, object userState) {
            if ((this.ConvertOSGRtoLatitudeLongitudeOperationCompleted == null)) {
                this.ConvertOSGRtoLatitudeLongitudeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnConvertOSGRtoLatitudeLongitudeOperationCompleted);
            }
            this.InvokeAsync("ConvertOSGRtoLatitudeLongitude", new object[] {
                        osgrs}, this.ConvertOSGRtoLatitudeLongitudeOperationCompleted, userState);
        }
        
        private void OnConvertOSGRtoLatitudeLongitudeOperationCompleted(object arg) {
            if ((this.ConvertOSGRtoLatitudeLongitudeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ConvertOSGRtoLatitudeLongitudeCompleted(this, new ConvertOSGRtoLatitudeLongitudeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.transportdirect.info/CoordinateConvertorService/TestActive", RequestNamespace="http://www.transportdirect.info/CoordinateConvertorService", ResponseNamespace="http://www.transportdirect.info/CoordinateConvertorService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool TestActive() {
            object[] results = this.Invoke("TestActive", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void TestActiveAsync() {
            this.TestActiveAsync(null);
        }
        
        /// <remarks/>
        public void TestActiveAsync(object userState) {
            if ((this.TestActiveOperationCompleted == null)) {
                this.TestActiveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTestActiveOperationCompleted);
            }
            this.InvokeAsync("TestActive", new object[0], this.TestActiveOperationCompleted, userState);
        }
        
        private void OnTestActiveOperationCompleted(object arg) {
            if ((this.TestActiveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TestActiveCompleted(this, new TestActiveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.transportdirect.info/CoordinateConvertorService/TestConvertOSGRToLatit" +
            "udeLongitude", RequestNamespace="http://www.transportdirect.info/CoordinateConvertorService", ResponseNamespace="http://www.transportdirect.info/CoordinateConvertorService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LatitudeLongitude TestConvertOSGRToLatitudeLongitude(int easting, int northing) {
            object[] results = this.Invoke("TestConvertOSGRToLatitudeLongitude", new object[] {
                        easting,
                        northing});
            return ((LatitudeLongitude)(results[0]));
        }
        
        /// <remarks/>
        public void TestConvertOSGRToLatitudeLongitudeAsync(int easting, int northing) {
            this.TestConvertOSGRToLatitudeLongitudeAsync(easting, northing, null);
        }
        
        /// <remarks/>
        public void TestConvertOSGRToLatitudeLongitudeAsync(int easting, int northing, object userState) {
            if ((this.TestConvertOSGRToLatitudeLongitudeOperationCompleted == null)) {
                this.TestConvertOSGRToLatitudeLongitudeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTestConvertOSGRToLatitudeLongitudeOperationCompleted);
            }
            this.InvokeAsync("TestConvertOSGRToLatitudeLongitude", new object[] {
                        easting,
                        northing}, this.TestConvertOSGRToLatitudeLongitudeOperationCompleted, userState);
        }
        
        private void OnTestConvertOSGRToLatitudeLongitudeOperationCompleted(object arg) {
            if ((this.TestConvertOSGRToLatitudeLongitudeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TestConvertOSGRToLatitudeLongitudeCompleted(this, new TestConvertOSGRToLatitudeLongitudeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.transportdirect.info/CoordinateConvertorService")]
    public partial class LatitudeLongitude {
        
        private double latitudeField;
        
        private double longitudeField;
        
        /// <remarks/>
        public double Latitude {
            get {
                return this.latitudeField;
            }
            set {
                this.latitudeField = value;
            }
        }
        
        /// <remarks/>
        public double Longitude {
            get {
                return this.longitudeField;
            }
            set {
                this.longitudeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.transportdirect.info/CoordinateConvertorService")]
    public partial class OSGridReference {
        
        private int eastingField;
        
        private int northingField;
        
        /// <remarks/>
        public int Easting {
            get {
                return this.eastingField;
            }
            set {
                this.eastingField = value;
            }
        }
        
        /// <remarks/>
        public int Northing {
            get {
                return this.northingField;
            }
            set {
                this.northingField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ConvertLatitudeLongitudetoOSGRCompletedEventHandler(object sender, ConvertLatitudeLongitudetoOSGRCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ConvertLatitudeLongitudetoOSGRCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ConvertLatitudeLongitudetoOSGRCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public OSGridReference[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((OSGridReference[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ConvertOSGRtoLatitudeLongitudeCompletedEventHandler(object sender, ConvertOSGRtoLatitudeLongitudeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ConvertOSGRtoLatitudeLongitudeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ConvertOSGRtoLatitudeLongitudeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LatitudeLongitude[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LatitudeLongitude[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void TestActiveCompletedEventHandler(object sender, TestActiveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TestActiveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TestActiveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void TestConvertOSGRToLatitudeLongitudeCompletedEventHandler(object sender, TestConvertOSGRToLatitudeLongitudeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TestConvertOSGRToLatitudeLongitudeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TestConvertOSGRToLatitudeLongitudeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LatitudeLongitude Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LatitudeLongitude)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591