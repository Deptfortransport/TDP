// *********************************************** 
// NAME     : Chart_GradientProfileChart.js 
// AUTHOR   : Atos Origin
// ************************************************ 

// Global variables 
var chartDataOutward = null; // data to populate chart
var chartDataReturn = null;

var chartOutward = null; // the chart
var chartReturn = null;

var divChartWaitOutward = null; // div's to hold outward chart
var divChartContainerOutward = null;
var divChartOutward = null;
var divChartErrorOutward = null;

var divChartWaitReturn = null; // div's to hold return chart
var divChartContainerReturn = null;
var divChartReturn = null;
var divChartErrorReturn = null;

var colourOutward = null;
var colourReturn = null;

// Function which calls the server side AJAX method if there is no chart data
function GenerateChart(outward) {
    
    // Include the canvas painter needed for IE
    ieCanvasInit('/Web2/scripts/Chart_iecanvas.htc');

    if (outward)
    {
        if( chartDataOutward == null) { 
            PageMethods.GetChartData(true, ChartCallBackOutward); 
        } 
        else { 
            ChartCallBackOutward(chartDataOutward); 
        }
    } 
    else
    {
        if( chartDataReturn == null) { 
            PageMethods.GetChartData(false, ChartCallBackReturn); 
        } 
        else { 
            ChartCallBackReturn(chartDataReturn); 
        }
    }
} 

// Function which fires when the AJAX call returns
function ChartCallBackOutward(objChartData) { 
    
    chartDataOutward = objChartData;
    
    if( chartDataOutward.ErrorOccured == false)
    {
        DrawChart(chartOutward, chartDataOutward, divChartOutward, divChartWaitOutward, divChartContainerOutward, colourOutward);
            
        // Populate the statistic labels with the data
        // This function is dynamically generated by the aspx.
        PopulateStatisticLabelsOutward(chartDataOutward);
    }
    else
    {
        ShowElement(divChartWaitOutward, false);
        ShowElement(divChartErrorOutward, true);
    }
}

function ChartCallBackReturn(objChartData) { 

    chartDataReturn = objChartData
    
    if( chartDataReturn.ErrorOccured == false)
    {
        DrawChart(chartReturn, chartDataReturn, divChartReturn, divChartWaitReturn, divChartContainerReturn, colourReturn);
    
        // Populate the statistic labels with the data
        // This function is dynamically generated by the aspx.
        PopulateStatisticLabelsReturn(chartDataReturn);
    }
    else
    {
        ShowElement(divChartWaitReturn, false);
        ShowElement(divChartErrorReturn, true);
    }
}


// Function which draws the chart for supplied element and data
function DrawChart(chart, chartData, divChart, divChartWait, divChartContainer, chartColour) { 

    // Populate the chart object with the data passed in
    if( chart == null){ 
        chart = new Chart(divChart); 
        chart.setDefaultType(CHART_AREA | CHART_STACKED); 
        chart.setVerticalRange( chartData.VerticalValueMin, chartData.VerticalValueMax ); 
        chart.setGridDensity( chartData.GridDensityHorizontal, chartData.GridDensityVertical ); 
        chart.setHorizontalLabels( chartData.HorizontalLabels ); 
        chart.setShowLegend( chartData.ShowLegend ); 
        chart.add( chartData.Series, chartColour, chartData.Values ); 
    } 
        
        ShowElement(divChartWait, false);
        ShowElement(divChartContainer, true);
        
        chart.draw();
}

// Function to hide and show an element
ShowElement = function(element, show)
{
    if (show)
    {
        element.style.display = "block";
    }
    else
    {
        element.style.display = "none";
    }
}


// Used to get the colour from a hidden div to fill the chart area in
function getStyle(oElm, strCssRule){
	var strValue = "";
	if(document.defaultView && document.defaultView.getComputedStyle){
		strValue = document.defaultView.getComputedStyle(oElm, "").getPropertyValue(strCssRule);
	}
	else if(oElm.currentStyle){
		strCssRule = strCssRule.replace(/\-(\w)/g, function (strMatch, p1){
			return p1.toUpperCase();
		});
		strValue = oElm.currentStyle[strCssRule];
	}
	return strValue;
}
