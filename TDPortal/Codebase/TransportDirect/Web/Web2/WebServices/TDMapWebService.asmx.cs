// *********************************************** 
// NAME                 : TDMapWebService.asmx.cs
// AUTHOR               : Amit Patel
// DATE CREATED         : 04/11/2009
// DESCRIPTION          : Map Web service to handle ajax calls generated by map api
// ************************************************ 
// $Log:   P:/TDPortal/archives/DotNet2.0Codebase/TransportDirect/Web2/WebServices/TDMapWebService.asmx.cs-arc  $ 
//
//   Rev 1.15   Oct 24 2011 10:47:12   mmodi
//Updated to display travel news toids for CJP user
//Resolution for 5758: Real Time in Car - Display TOIDs on incident popup for CJP user
//
//   Rev 1.14   Sep 01 2011 10:44:56   apatel
//Code update for Real Time Car
//Resolution for 5731: CCN 0548 - Real Time Information in Car
//
//   Rev 1.13   Aug 11 2010 10:19:26   apatel
//Updated to save news filter preferences for the logged on user
//Resolution for 5591: TravelNews preferences not saved for logged in user
//
//   Rev 1.12   Mar 16 2010 10:36:34   apatel
//Updated to implement logging for ESRI map errors
//Resolution for 5456: ESRI Mapping Error
//
//   Rev 1.11   Feb 09 2010 13:04:42   apatel
//updated for cycle printer friendly map
//Resolution for 5399: Cycle Planner Printer Friendly page broken
//
//   Rev 1.10   Jan 18 2010 12:18:26   mmodi
//Debug logging added when save map view state called
//Resolution for 5375: Maps - Printer friendly map page refresh change
//
//   Rev 1.9   Dec 11 2009 14:53:52   apatel
//Mapping enhancement for travelnews
//Resolution for 5331: CCN0533  Mapping Enhancements - AJAX Maps
//
//   Rev 1.8   Dec 04 2009 11:40:18   apatel
//updated for session issue
//Resolution for 5331: CCN0533  Mapping Enhancements - AJAX Maps
//
//   Rev 1.7   Dec 01 2009 11:08:06   mmodi
//Commited travel news state back to session
//Resolution for 5331: CCN0533  Mapping Enhancements - AJAX Maps
//
//   Rev 1.6   Nov 30 2009 12:03:14   apatel
//sorted error with .net3 variable declaration
//Resolution for 5331: CCN0533  Mapping Enhancements - AJAX Maps
//
//   Rev 1.5   Nov 26 2009 15:47:34   apatel
//TravelNews page and controls updated for new mapping functionality
//Resolution for 5331: CCN0533  Mapping Enhancements - AJAX Maps
//
//   Rev 1.4   Nov 23 2009 13:00:42   apatel
//Updated with comments and method to log page entry event from client side
//Resolution for 5331: CCN0533  Mapping Enhancements - AJAX Maps
//
//   Rev 1.3   Nov 16 2009 17:07:24   apatel
//Updated for mapping enhancement
//Resolution for 5331: CCN0533  Mapping Enhancements - AJAX Maps
//
//   Rev 1.2   Nov 13 2009 11:17:40   apatel
//Updated to log Map api events and Map events
//Resolution for 5331: CCN0533  Mapping Enhancements - AJAX Maps
//
//   Rev 1.1   Nov 11 2009 09:49:10   apatel
//Updated SetMapState webservice method
//Resolution for 5331: CCN0533  Mapping Enhancements - AJAX Maps
//
//   Rev 1.0   Nov 05 2009 15:04:20   apatel
//Initial revision.
//Resolution for 5331: CCN0533  Mapping Enhancements - AJAX Maps

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using System.Web;
using System.Web.Script.Serialization;
using System.Web.Script.Services;
using System.Web.Services;

using TransportDirect.Common;
using TransportDirect.Common.Logging;
using TransportDirect.Presentation.InteractiveMapping;
using TransportDirect.ReportDataProvider.TDPCustomEvents;
using TransportDirect.UserPortal.SessionManager;
using TransportDirect.UserPortal.TravelNews;
using TransportDirect.UserPortal.TravelNewsInterface;
using TransportDirect.UserPortal.Web.Adapters;

using Logger = System.Diagnostics.Trace;

namespace TransportDirect.UserPortal.Web
{
    /// <summary>
    /// Summary description for TDMapWebService
    /// Handles various mapping calls from client javascript as a part of ccn 533 mapping enhancemnets
    /// </summary>
    [WebService(Namespace = "http://tempuri.org/")]
    [WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]
    [System.ComponentModel.ToolboxItem(false)]
    [ScriptService()]
    public class TDMapWebService : System.Web.Services.WebService
    {
        private MapHelper maphelper = new MapHelper();

        /// <summary>
        /// Sets up start location in the session when user clicks on 'Plan a Journey from' links on the map.
        /// The location set up is used as 'from' location on relevant journey planner.
        /// The method returns a url so client side javascript can navigate the currently visible page to 
        /// relevant page.
        /// </summary>
        /// <param name="easting">OS grid reference - easting coordinate</param>
        /// <param name="northing">OS grid reference - northing coordinate</param>
        /// <param name="text">Text inputted by client to display as location name</param>
        /// <param name="pageId">Page Id of currently displayed page</param>
        /// <returns>Returns url as a string for client to move on to relevant page</returns>
        [WebMethod(EnableSession=true)]
        public string SetStartLocation(int easting, int northing, string text, string pageId)
        {
            if (Session.IsNewSession)
            {
                Session.Abandon();
                throw new Exception();
            }
            else
            {
                //Logs UseAsStartPoint map api event
                LogMapAPIEvent(MapAPIEventCommandCategory.UseAsStartPoint);

                PageId currentPageId = (PageId)Enum.Parse(typeof(PageId), pageId);
                return maphelper.SetStartLocationPoint(easting, northing, text, currentPageId);
            }
            
        }

        /// <summary>
        /// Sets up end location in the session when user clicks on 'Plan a Journey to' links on the map.
        /// The location set up is used as 'to' location on relevant journey planner.
        /// The method returns a url so client side javascript can navigate the currently visible page to 
        /// relevant page.
        /// </summary>
        /// <param name="easting">OS grid reference - easting coordinate</param>
        /// <param name="northing">OS grid reference - northing coordinate</param>
        /// <param name="text">Text inputted by client to display as location name</param>
        /// <param name="pageId">Page Id of currently displayed page</param>
        /// <returns>Returns url as a string for client to move on to relevant page</returns>
        [WebMethod(EnableSession = true)]
        public string SetEndLocation(int easting, int northing, string text, string pageId)
        {
            if (Session.IsNewSession)
            {
                Session.Abandon();
                throw new Exception();
            }
            else
            {
                //Logs UseAsEndPoint map api event
                LogMapAPIEvent(MapAPIEventCommandCategory.UseAsEndPoint);

                PageId currentPageId = (PageId)Enum.Parse(typeof(PageId), pageId);
                return maphelper.SetEndLocationPoint(easting, northing, text, currentPageId);
            }
            
        }

        /// <summary>
        /// Sets up via location in the session when user clicks on 'Plan a Journey via' links on the map.
        /// The location set up is used as 'via' location on relevant journey planner.
        /// The method returns a url so client side javascript can navigate the currently visible page to 
        /// relevant page.
        /// </summary>
        /// <param name="easting">OS grid reference - easting coordinate</param>
        /// <param name="northing">OS grid reference - northing coordinate</param>
        /// <param name="text">Text inputted by client to display as location name</param>
        /// <param name="pageId">Page Id of currently displayed page</param>
        /// <returns>Returns url as a string for client to move on to relevant page</returns>
        [WebMethod(EnableSession = true)]
        public string SetViaLocation(int easting, int northing, string text, string pageId)
        {
            if (Session.IsNewSession)
            {
                Session.Abandon();
                throw new Exception();
            }
            else
            {
                //Logs UseAsviaPoint map api event
                LogMapAPIEvent(MapAPIEventCommandCategory.UseAsViaPoint);

                PageId currentPageId = (PageId)Enum.Parse(typeof(PageId), pageId);
                return maphelper.SetViaLocationPoint(easting, northing, text, currentPageId);
            }
            
        }

        /// <summary>
        /// Sets up stop information details in session and returns a stopinformation page url as string, using which 
        /// client side javascript navigates currently visible page to stopinformation page.
        /// </summary>
        /// <param name="stopId">stop code(NaPTAN)</param>
        /// <param name="pageId">Page Id of currently displayed page</param>
        /// <returns>Stop Information page url</returns>
        [WebMethod(EnableSession = true)]
        public string SetStopInformation(string stopId, string pageId)
        {
            if (Session.IsNewSession)
            {
                Session.Abandon();
                throw new Exception();
            }
            else
            {
                //Logs ShowStopsInformation map api event
                LogMapAPIEvent(MapAPIEventCommandCategory.ShowStopsInformation);

                PageId currentPageId = (PageId)Enum.Parse(typeof(PageId), pageId);
                return maphelper.SetStopInformation(stopId, currentPageId);
            }
            
        }

        /// <summary>
        /// Sets up car park information in session for CarParkInformation page to display information about the car park link
        /// clicked by the user. The method returns CarParkInformation page url
        /// </summary>
        /// <param name="carparkId">Car Park reference number</param>
        /// <param name="pageId">Page Id of currently displayed page</param>
        /// <returns></returns>
        [WebMethod(EnableSession = true)]
        public string SetCarParkInformation(string carparkId, string pageId)
        {
            if (Session.IsNewSession)
            {
                Session.Abandon();
                throw new Exception();
            }
            else
            {
                //Logs ShowCarParkInformation map api event
                LogMapAPIEvent(MapAPIEventCommandCategory.ShowCarParkInformation);

                PageId currentPageId = (PageId)Enum.Parse(typeof(PageId), pageId);
                return maphelper.SetCarParkInformation(carparkId, currentPageId);
            }

            
        }

        /// <summary>
        /// Saves printer friendly map image url in session for printer friendly page to show
        /// </summary>
        /// <param name="mapUrl">Map image url</param>
        /// <param name="mapSymbolsState">State of the symbols showing on the map</param>
        /// <param name="mapViewTypeText">Map view type text</param>
        /// <param name="isOutward">true if the map view state is set for outward journey or a single map is showing</param>
        [WebMethod(EnableSession = true)]
        public void SaveMapViewState(string mapUrl,bool[][] mapSymbolsState, string mapViewTypeText, bool isOutward)
        {
            if (Session.IsNewSession)
            {
                Session.Abandon();
                throw new Exception();
            }
            else
            {
                maphelper.SaveMapState(mapUrl, mapSymbolsState, mapViewTypeText, isOutward);

                OperationalEvent oe = new OperationalEvent(TDEventCategory.Infrastructure, TDTraceLevel.Verbose,
                    string.Format("SaveMapViewState called for URL[{0}], ViewText[{1}], Outward[{2}]", mapUrl, mapViewTypeText, isOutward));
                Logger.Write(oe);
            }
        }

        /// <summary>
        /// Sets up printer friendly map image url and map tile urls in session for cycle journey printer friendly page
        /// </summary>
        /// <param name="mapUrl">Map image url</param>
        /// <param name="mapTiles">JSON string object representing CyclePrintDetail array object as serialised string</param>
        /// <param name="tileScale">Scale at which map tiles images generated</param>
        /// <param name="mapSymbolsState">State of teh symbols showing on the map</param>
        /// <param name="mapViewTypeText">Map view type text</param>
        /// <param name="isOutward">true if the map view state is set for outward journey</param>
        [WebMethod(EnableSession = true)]
        public void SaveCycleMapTileViewState(string mapUrl, string mapTiles, double tileScale, bool[][] mapSymbolsState, string mapViewTypeText, bool isOutward)
        {
            if (Session.IsNewSession)
            {
                Session.Abandon();
                throw new Exception();
            }
            else
            {
                //mapTiles string is comes in JSON format.Deserialising it to CyclePrintDetail array object
                maphelper.SaveCycleMapTileState(mapUrl, mapTiles, tileScale, mapSymbolsState, mapViewTypeText, isOutward);

                OperationalEvent oe = new OperationalEvent(TDEventCategory.Infrastructure, TDTraceLevel.Verbose,
                    string.Format("SaveCycleMapTileViewState called for URL[{0}], TileScale[{1}], ViewText[{2}], Outward[{3}]", mapUrl, tileScale, mapViewTypeText, isOutward));
                Logger.Write(oe);
            }
        }

        /// <summary>
        /// Logs Map event
        /// Map Overlay event not get logged by ESRI mapping api. This event gets logged by this method.
        /// </summary>
        /// <param name="commandCategory">Category of the map event i.e MapPan, MapZoom, MapOverlay, etc.</param>
        /// <param name="scale">Scale of the map displaying</param>
        [WebMethod(EnableSession = true)]
        public void LogMapEvent(string commandCategory, int scale)
        {
            try
            {
                MapEventCommandCategory eventCategory = (MapEventCommandCategory)Enum.Parse(typeof(MapEventCommandCategory), commandCategory, true);
                MapLogging.Write(eventCategory, scale, DateTime.Now);
            }
            catch (Exception ex)
            {
                // Log the exception in case of error
                OperationalEvent operationalEvent = new OperationalEvent
                    (TDEventCategory.Infrastructure, TDTraceLevel.Error, "Webservice log map event failed. - " + ex.Message);

                Logger.Write(operationalEvent);
            }
        }

        /// <summary>
        /// Logs page entry event
        /// </summary>
        /// <param name="pageId">Id of the page for which page entry event needs logging</param>
        [WebMethod(EnableSession = true)]
        public void LogPageEntryEvent(string pageId)
        {
            try
            {
                string sessionId = TDSessionManager.Current.Session.SessionID;
			
			    bool userLoggedOn = TDSessionManager.Current.Authenticated;

                PageEntryEvent pageEntryEvent = new PageEntryEvent((PageId)Enum.Parse(typeof(PageId), pageId, true), sessionId, userLoggedOn);
                Logger.Write(pageEntryEvent);
            }
            catch (Exception ex)
            {
                // Log the exception in case of error
                OperationalEvent operationalEvent = new OperationalEvent
                    (TDEventCategory.Infrastructure, TDTraceLevel.Error, "Webservice log page entry event failed. - " + ex.Message);

                Logger.Write(operationalEvent);
            }
        }

        /// <summary>
        /// Gets the travel news data for the options passed
        /// </summary>
        /// <param name="selectedRegion">Travelnews region</param>
        /// <param name="transportType">Type of transport(public, road, etc.)</param>
        /// <param name="incidentType">Type of incident</param>
        /// <param name="severity">Severity of news</param>
        /// <param name="selectedDate">Date of the news</param>
        /// <param name="searchText">Search phrase</param>
        /// <param name="incidentId">Specific travel news Id</param>
        /// <returns></returns>
        [WebMethod(EnableSession = true)]
        public string[][] GetTravelNews(string selectedRegion, TransportType transportType, IncidentType incidentType, DelayType severity, string selectedDate, string searchText, string incidentId, bool savePreference)
        {
            List<string[]> result = new List<string[]>();

            if (Session.IsNewSession)
            {
                Session.Abandon();
                throw new Exception();
            }
            else
            {
                
                TravelNewsItem[] travelNewsResult = null;

                TravelNewsHelper.InitialiseTravelNewsState();

                TravelNewsState tnState = TravelNewsHelper.CurrentTravelNewsState;

                tnState.SetDefaultState();

                if (!string.IsNullOrEmpty(selectedRegion))
                {
                    tnState.SelectedRegion = selectedRegion;
                }

                tnState.SelectedTransport = transportType;
                tnState.SelectedIncidentType = incidentType;
                tnState.SelectedDelays = severity;

                TDDateTime tnDate = TDDateTime.Now;

                if (!string.IsNullOrEmpty(selectedDate))
                {
                    tnDate = TDDateTime.Parse(selectedDate, CultureInfo.CurrentCulture);
                }

                tnState.SelectedDate = tnDate;

                tnState.SearchPhrase = searchText;

                if (!string.IsNullOrEmpty(incidentId))
                {
                    tnState.SelectedIncident = incidentId;
                }

                TravelNewsHelper.CurrentTravelNewsState = tnState;

                if (savePreference)
                {
                    TravelNewsHelper.SavePreferences();
                }

                if (!string.IsNullOrEmpty(incidentId))
                {
                    travelNewsResult = new TravelNewsItem[1];
                    travelNewsResult[0] = TravelNewsHelper.GetTravelNewsItem(incidentId);
                }
                else
                {
                    travelNewsResult = TravelNewsHelper.GetNewsItems();
                }

                foreach (TravelNewsItem tnItem in travelNewsResult)
                {
                    string[] itemData = new string[11];
                    itemData[0] = tnItem.Uid;
                    itemData[1] = tnItem.IncidentType;
                    itemData[2] = tnItem.Location;
                    itemData[3] = tnItem.DetailText;
                    itemData[4] = tnItem.SeverityDescription;
                    itemData[5] = DisplayFormatAdapter.StandardTNDateAndTimeFormat(tnItem.StartDateTime);
                    itemData[6] = DisplayFormatAdapter.StandardTNDateAndTimeFormat(tnItem.LastModifiedDateTime);
                    itemData[7] = tnItem.Easting.ToString();
                    itemData[8] = tnItem.Northing.ToString();
                    itemData[9] = TravelNewsHelper.DefaultIncidentZoomLevel.ToString();

                    StringBuilder toids = new StringBuilder();
                    if (tnItem.AffectedToids != null)
                    {
                        foreach (string toid in tnItem.AffectedToids)
                        {
                            toids.Append(toid);
                            toids.Append(", ");
                        }
                    }

                    itemData[10] = toids.ToString().TrimEnd(new char[2] { ',', ' ' });

                    result.Add(itemData);
                }

                // Commit back to database
                TDSessionManager.Current.SaveData();
            }

            return result.ToArray();
        }

       
        /// <summary>
        /// Sets the current view of the travel news
        /// </summary>
        /// <param name="view"></param>
        [WebMethod(EnableSession = true)]
        public void SetTravelNewsSelectedView(string view)
        {
            if (Session.IsNewSession)
            {
                Session.Abandon();
                throw new Exception();
            }
            else
            {
                TravelNewsState tnState = TravelNewsHelper.CurrentTravelNewsState;
                tnState.SelectedView = TravelNewsViewType.Details;
                try
                {
                    tnState.SelectedView = (TravelNewsViewType)Enum.Parse(typeof(TravelNewsViewType), view, true);
                }
                catch (Exception ex)
                {
                    // Log the exception in case of error
                    OperationalEvent operationalEvent = new OperationalEvent
                        (TDEventCategory.Infrastructure, TDTraceLevel.Error, "Unable to set Travel News selected view via webservice - " + ex.Message);

                    Logger.Write(operationalEvent);

                    tnState.SelectedView = TravelNewsViewType.Details;
                }

                // Commit back to database
                TDSessionManager.Current.SaveData();
            }
        }



        /// <summary>
        /// Sets the current view of the travel news
        /// </summary>
        /// <param name="view"></param>
        [WebMethod()]
        public void LogESRIError(string errorType, string errorMsg)
        {
            string message = string.Format("ESRI error of type {0} raised. StackTrace:{1}", errorType, errorMsg);
            
            // Log the exception in case of error
            OperationalEvent operationalEvent = new OperationalEvent
                (TDEventCategory.Infrastructure, TDTraceLevel.Error, message);

            Logger.Write(operationalEvent);
        }

        /// <summary>
        /// helper method to log map api events
        /// </summary>
        /// <param name="commandCategory">Category of the map api event</param>
        private void LogMapAPIEvent(MapAPIEventCommandCategory commandCategory)
        {
            // Logging Map api call event for reporting
            MapAPIEvent mapEvent = new MapAPIEvent(commandCategory, DateTime.Now, TDSessionManager.Current.Session.SessionID);
            Logger.Write(mapEvent);
        }
    }
}
