// *********************************************** 
// NAME                 : TDWebService.asmx.cs
// AUTHOR               : Amit Patel
// DATE CREATED         : 27/08/2011
// DESCRIPTION          : Web service to handle ajax calls generated by client javascript
// ************************************************ 
// $Log:   P:/TDPortal/archives/DotNet2.0Codebase/TransportDirect/Web2/WebServices/TDWebService.aspx.cs-arc  $ 
//
//   Rev 1.3   Oct 24 2011 10:47:18   mmodi
//Updated to display travel news toids for CJP user
//Resolution for 5758: Real Time in Car - Display TOIDs on incident popup for CJP user
//
//   Rev 1.2   Sep 22 2011 14:58:22   mmodi
//Updated to use travel news map datetime format
//Resolution for 5741: Real Time In Car - Severity not shown on travel news popup and datetime format
//
//   Rev 1.1   Sep 06 2011 12:13:50   apatel
//Updated for Real Time Car following code review
//Resolution for 5731: CCN 0548 - Real Time Information in Car
//
//   Rev 1.0   Sep 02 2011 08:51:58   apatel
//Initial revision.
//Resolution for 5731: CCN 0548 - Real Time Information in Car
//

using System;
using System.Collections.Generic;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.Services;
using TransportDirect.UserPortal.TravelNewsInterface;
using TransportDirect.UserPortal.Web.Adapters;
using TransportDirect.Common;
using TransportDirect.ReportDataProvider.TDPCustomEvents;
using TransportDirect.UserPortal.SessionManager;

using Logger = System.Diagnostics.Trace;
using System.Text.RegularExpressions;
using System.Text;

namespace TransportDirect.UserPortal.Web
{
    /// <summary>
    /// Web service to handle ajax calls generated by client javascript
    /// </summary>
    public partial class TDWebService : TDPage
    {
        #region Constructor
		/// <summary>
		/// Default Constructor
		/// </summary>
        public TDWebService()
		{
            pageId = PageId.TDWebService;
		}
        #endregion

        #region Page Entry Events
        /// <summary>
        /// Logs page entry for this webservice page every time a method gets called from client api
        /// </summary>
        private static void LogPageEntryEvent()
        {
            // Log the page activity to the TD Page Entry Event.
            // TDPCustomEvents
            PageEntryEvent logPage = new PageEntryEvent(PageId.TDWebService, TDSessionManager.Current.Session.SessionID, TDSessionManager.Current.Authenticated);
            Logger.Write(logPage);
            
        }
        #endregion

        #region Web Methods
        /// <summary>
        /// Web method called by client javascript
        /// Returns travel news item details for the travel news item specified by unique Id
        /// </summary>
        /// <param name="uid">Travel news item unique identifier</param>
        /// <returns>String array detail for travel news</returns>
        [WebMethod(EnableSession = false)]
        public static string[] GetTravelNewsById(string uid)
        {
            LogPageEntryEvent();

            if (!string.IsNullOrEmpty(uid.Trim()))
            {
                if (uid.Trim().Length < 25)
                {
                    TravelNewsItem tnItem = TravelNewsHelper.GetTravelNewsItem(RemovePossibleSqlInjection(uid, 2));

                    string[] itemData = new string[13];

                    if (tnItem != null)
                    {

                        itemData[0] = tnItem.Uid;
                        itemData[1] = tnItem.IncidentType;
                        itemData[2] = tnItem.Location;
                        itemData[3] = tnItem.HeadlineText;
                        itemData[4] = tnItem.DetailText;
                        itemData[5] = tnItem.SeverityDescription;
                        itemData[6] = DisplayFormatAdapter.StandardTNMapDateAndTimeFormat(tnItem.StartDateTime);
                        itemData[7] = DisplayFormatAdapter.StandardTNMapDateAndTimeFormat(tnItem.ExpiryDateTime);
                        itemData[8] = DisplayFormatAdapter.StandardTNMapDateAndTimeFormat(tnItem.LastModifiedDateTime);
                        itemData[9] = tnItem.Easting.ToString();
                        itemData[10] = tnItem.Northing.ToString();
                        itemData[11] = TravelNewsHelper.DefaultIncidentZoomLevel.ToString();

                        StringBuilder toids = new StringBuilder();
                        if (tnItem.AffectedToids != null)
                        {
                            foreach (string toid in tnItem.AffectedToids)
                            {
                                toids.Append(toid);
                                toids.Append(", ");
                            }
                        }

                        itemData[12] = toids.ToString().TrimEnd(new char[2] {',', ' '});

                        return itemData;
                    }
                }
            }
            return null;
        }
        #endregion

        #region Private Methods
        /// <summary>
        /// Removes possible sql injection characters
        /// </summary>
        /// <param name="stringToCheck">String to be checked</param>
        /// <param name="theLevel">Level of validation required: 1 - Basic check 2- test for most word used in sql queries</param>
        /// <returns></returns>
        private static string RemovePossibleSqlInjection(string stringToCheck, int theLevel)
        {
            // intLevel represent how thorough the value will be checked for dangerous code
            // intLevel (1) - Do just the basic. This level will already counter most of the SQL injection attacks
            // intLevel (2) -   (non breaking space) will be added to most words used in SQL queries to prevent unauthorized access to the database. Safe to be printed back into HTML code. Don't use for usernames or passwords

            string strValue = stringToCheck;
            int intLevel = theLevel;

            if (strValue != null)
            {
                if (intLevel > 0)
                {
                    strValue = strValue.Replace("'", "''"); // Most important one! This line alone can prevent most injection attacks
                    strValue = strValue.Replace("--", "");
                    strValue = strValue.Replace("[", "[[]");
                    strValue = strValue.Replace("%", "[%]");
                }
                if (intLevel > 1)
                {
                    string[] myArray = new string[] { "xp_ ", "update ", "insert ", "select ", "drop ", "alter ", "create ", "rename ", "delete ", "replace ", "and ", "or " };
                    int i = 0;
                    int i2 = 0;
                    int intLenghtLeft = 0;
                    for (i = 0; i < myArray.Length; i++)
                    {
                        string strWord = myArray[i];
                        Regex rx = new Regex(strWord, RegexOptions.Compiled | RegexOptions.IgnoreCase);
                        MatchCollection matches = rx.Matches(strValue);
                        i2 = 0;
                        foreach (Match match in matches)
                        {
                            GroupCollection groups = match.Groups;
                            intLenghtLeft = groups[0].Index + myArray[i].Length + i2;
                            strValue = strValue.Substring(0, intLenghtLeft - 1) + "&nbsp;" + strValue.Substring(strValue.Length - (strValue.Length - intLenghtLeft), strValue.Length - intLenghtLeft);
                            i2 += 5;
                        }
                    }
                }
                return strValue;
            }
            else
            {
                return strValue;
            }
        }
        #endregion
    }
}
